const int AIN1 = 17;    // Driver-1, channel A
const int AIN2 = 5;
const int PWMA = 16;

const int BIN1 = 19;    // Driver-1, channel B
const int BIN2 = 15;
const int PWMB = 18;

const int STBY1 = 23;   // Driver-1 standby

const int CIN1 = 33;   // Driver-2, channel C
const int CIN2 = 25;
const int PWMC = 32;

const int DIN1 = 14;   // Driver-2, channel D
const int DIN2 = 27;
const int PWMD = 26;

const int STBY2 = 12;   // Driver-2 standby

void setMotorSpeed(int pwmPin, int in1, int in2, int speed) {
  if (speed > 0) {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
  } else if (speed < 0) {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
  } else {
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
  }
  analogWrite(pwmPin, abs(speed));
}
void moveForward(int speed) {
  setMotorSpeed(PWMA, AIN1, AIN2, speed);
  setMotorSpeed(PWMD, DIN1, DIN2, speed);
  // Stop other motors
  setMotorSpeed(PWMB, BIN1, BIN2, 0);
  setMotorSpeed(PWMC, CIN1, CIN2, 0);
  Serial.println("Moving Forward (Motors A & D only)");
}

void moveBackward(int speed) {
  setMotorSpeed(PWMA, AIN1, AIN2, -speed);
  setMotorSpeed(PWMD, DIN1, DIN2, -speed);
  // Stop other motors
  setMotorSpeed(PWMB, BIN1, BIN2, 0);
  setMotorSpeed(PWMC, CIN1, CIN2, 0);
  Serial.println("Moving Backward (Motors A & D only)");
}

void orbitMovement(int speed) {
  int slowSpeed = (int)(baseSpeed * scale);
  setMotorSpeed(PWMA, AIN1, AIN2, speed);
  setMotorSpeed(PWMB, BIN1, BIN2, speed);
  setMotorSpeed(PWMC, CIN1, CIN2, speed);
  setMotorSpeed(PWMD, DIN1, DIN2, speed);
  Serial.print("Orbiting: Base Speed = ");
  Serial.println(baseSpeed);
}

void stopAllMotors() {
  setMotorSpeed(PWMA, AIN1, AIN2, 0);
  setMotorSpeed(PWMB, BIN1, BIN2, 0);
  setMotorSpeed(PWMC, CIN1, CIN2, 0);
  setMotorSpeed(PWMD, DIN1, DIN2, 0);
  Serial.println("Stopped");
}

void processMovementCommand(char cmd) {
  switch (toupper(cmd)) {
    case 'F':
      moveForward(baseSpeed);
      break;
    case 'B':
      moveBackward(baseSpeed);
      break;
    case 'O':
      orbitMovement(baseSpeed);
      break;
    case 'S':
      stopAllMotors();
      break;
    case 'H':
      printHelp();
      break;
    default:
      Serial.println("Invalid command");
      break;
  }
}

void printHelp() {
  Serial.println("\nRobot Companion Controls:");
  Serial.println("F - Move Forward (Motors A & D)");
  Serial.println("B - Move Backward (Motors A & D)");
  Serial.println("O - Orbit (All motors)");
  Serial.println("S - Stop");
  Serial.println("H - Help");
}
void setup() {
  // Initialize motor control pins
  pinMode(AIN1, OUTPUT); pinMode(AIN2, OUTPUT);
  pinMode(BIN1, OUTPUT); pinMode(BIN2, OUTPUT);
  pinMode(CIN1, OUTPUT); pinMode(CIN2, OUTPUT);
  pinMode(DIN1, OUTPUT); pinMode(DIN2, OUTPUT);
  pinMode(PWMA, OUTPUT); pinMode(PWMB, OUTPUT);
  pinMode(PWMC, OUTPUT); pinMode(PWMD, OUTPUT);
  pinMode(STBY1, OUTPUT); pinMode(STBY2, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);

  // Take drivers out of standby
  digitalWrite(STBY1, HIGH);
  digitalWrite(STBY2, HIGH);
}
void loop() {
  if (SerialBT.available()) {
  char command = SerialBT.read();
  Serial.print("Received command: ");
  Serial.println(command);
}
}
